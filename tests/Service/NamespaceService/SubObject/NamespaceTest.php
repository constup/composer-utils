<?php

declare(strict_types = 1);
/**
 * This file has been automatically generated by Constup Automatrix.
 * https://constup.com/automatrix
 */

namespace Constup\ComposerUtils\Tests\Service\NamespaceService\SubObject;

use Constup\ComposerUtils\Service\NamespaceService\SubObject\NamespaceImmutableObject;
use Constup\ComposerUtils\Service\NamespaceService\SubObject\NamespaceImmutableObjectInterface;
use PHPUnit\Framework\TestCase;

class NamespaceTest extends TestCase
{
    use NamespaceTestDataProviderTrait;

    const TESTED_CLASS = NamespaceImmutableObject::class;
    const PROPERTIES = ['namespace', 'absoluteDirectory'];

    public function testHasProperties()
    {
        foreach (self::PROPERTIES as $property) {
            $this->assertClassHasAttribute($property, self::TESTED_CLASS);
        }
    }

    /**
     * @param string $namespace
     * @param string $absoluteDirectory
     * @param string $replacement
     * @dataProvider testWithNamespaceDataProvider
     */
    public function testWithNamespace(string $namespace, string $absoluteDirectory, string $replacement)
    {
        $mock = $this->getMockBuilder(self::TESTED_CLASS)
                    ->disableOriginalConstructor()
                    ->onlyMethods(['getNamespace', 'getAbsoluteDirectory'])
                    ->getMock();

        $mock->method('getNamespace')->willReturn($namespace);
        $mock->method('getAbsoluteDirectory')->willReturn($absoluteDirectory);

        /** @var NamespaceImmutableObjectInterface $mock */
        $result = $mock->withNamespace($replacement);
        $this->assertInstanceOf(self::TESTED_CLASS, $result);
        $this->assertEquals($replacement, $result->getNamespace());
        $this->assertEquals($mock->getAbsoluteDirectory(), $result->getAbsoluteDirectory());
    }

    /**
     * @param string $namespace
     * @param string $absoluteDirectory
     * @param string $replacement
     * @dataProvider testWithAbsoluteDirectoryDataProvider
     */
    public function testWithAbsoluteDirectory(string $namespace, string $absoluteDirectory, string $replacement)
    {
        $mock = $this->getMockBuilder(self::TESTED_CLASS)
                    ->disableOriginalConstructor()
                    ->onlyMethods(['getNamespace', 'getAbsoluteDirectory'])
                    ->getMock();

        $mock->method('getNamespace')->willReturn($namespace);
        $mock->method('getAbsoluteDirectory')->willReturn($absoluteDirectory);

        /** @var NamespaceImmutableObjectInterface $mock */
        $result = $mock->withAbsoluteDirectory($replacement);
        $this->assertInstanceOf(self::TESTED_CLASS, $result);
        $this->assertEquals($replacement, $result->getAbsoluteDirectory());
        $this->assertEquals($mock->getNamespace(), $result->getNamespace());
    }
}
